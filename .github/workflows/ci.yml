name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  dependency-check:
    runs-on: ubuntu-latest
    name: Dependency Version Check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.19.0'
          cache: 'npm'

      - name: Check package-lock.json exists
        run: |
          if [ ! -f "package-lock.json" ]; then
            echo "❌ package-lock.json is missing!"
            echo "Please run 'npm install' and commit the lock file."
            exit 1
          fi
          echo "✅ package-lock.json found"

      - name: Verify lock file integrity
        run: |
          npm ci --only=production
          echo "✅ Lock file integrity verified"

      - name: Check for outdated packages
        run: |
          OUTDATED=$(npm outdated --depth=0 2>/dev/null || true)
          if [ -n "$OUTDATED" ]; then
            echo "⚠️  Found outdated packages:"
            echo "$OUTDATED"
            echo "Consider updating with: npm run deps:update"
          else
            echo "✅ All packages are up to date"
          fi

      - name: Security audit
        run: |
          npm audit --audit-level=moderate || {
            echo "⚠️  Security vulnerabilities found"
            echo "Run 'npm run deps:fix' to fix them"
          }

  test:
    runs-on: ubuntu-latest
    needs: dependency-check

    strategy:
      matrix:
        node-version: [18.19.0, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies (using lock file)
        run: npm ci

      - name: Verify Node.js version
        run: |
          node --version
          npm --version
          if [ "${{ matrix.node-version }}" != "20.x" ]; then
            EXPECTED_VERSION="v${{ matrix.node-version }}"
            ACTUAL_VERSION=$(node --version)
            if [ "$ACTUAL_VERSION" != "$EXPECTED_VERSION" ]; then
              echo "❌ Node.js version mismatch: expected $EXPECTED_VERSION, got $ACTUAL_VERSION"
              exit 1
            fi
          fi

      - name: Run linting
        run: npm run lint

      - name: Check code formatting
        run: npm run format:check

      - name: Run TypeScript type check
        run: npm run type-check

      - name: Run tests
        run: npm test -- --coverage --watchAll=false

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  build:
    needs: [dependency-check, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.19.0'
          cache: 'npm'

      - name: Install dependencies (using lock file)
        run: npm ci

      - name: Build web version
        run: npm run build:web

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: web-build
          path: dist/
